package com.zj.action.chapter05;

/**
 * 阻塞队列(BlockingQueue)支持生产者消费者模式
 */
public class ProducerConsumer03 {

    public static void main(String[] args) {
        //一个生产者消费者设计分离了"识别需要完成的工作"和"执行工作"
        //生产者和消费者以不同的速度生产和消费着数据,该模式将这些活动解耦,简化了工作负荷的管理

        //该模式是围绕阻塞队列展开的
        //生产者不需要关心消费者是谁,只管把数据放入队列
        //消费者不需要关心生产者是谁,只管从队列中取数据

        //最常见的实现方式是线程池与工作队列相结合

        //双端队列和窃取工作
        //BlockingDequeue(发音是deck)是双端队列
        //在双端队列的生产者消费者中,消费者消费完了自己队列的任务后,可以窃取其他消费者的双端队列中的末尾任务
        //当一个线程发现了新的任务单元时,会把它放入队列末尾


    }


}
