汇编语言是对底层机器的轻微抽象
LISP和APL是只针对待解决的问题建模
面向对象方式(OOP)允许根据问题来描述问题而不是根据运行解决方案的计算机来描述问题
SmallTalk(第一个成功的面向对象语言)的五个特性：
 1.万物皆为对象
 2.程序是对象的集合,他们通过发送信息来告知彼此需要做的
 	可以把消息想象成为某个特定对象的方法的调用请求
 3.每个对象都有自己的由其他对象所构成的存储
 	包结构--可以引入不同的对象,使得单个对象保持简单性
 4.每个对象都有其类型
 	每个类最重要的区别于其他类的特性就是--可以发送什么样的消息给它
 5.某一特定类型的所有对象都可以接收同样的消息
 	父类引用指向子类对象--可替代性
简介的描述为：每个对象都有状态、行为和标识
	即对象的内部数据(成员变量)、方法和在内存中的地址 

在良好的面向对象设计中,每个对象都可以很好地完成一个任务,但它不试图做更多的事

程序员分类:
 1.类创建者--创建的类只向客户端程序员暴露必要的部分,而隐藏其他部分,
 	使得修改隐藏的部分不会对其他任何人造成影响
 2.客户端程序员--收集各种用来快速实现应用开发的类

访问控制存在的原因:
 1.让客户端程序员无法触及他们不应该触及的部分——这些部分只对数据类型的内部操作来说是必需的,
 	不是客户端程序员解决问题所需的接口的一部分
 2.允许库设计者改变类内部的工作方式而不影响客户端程序员
 
最简单地复用一个类的方式就是创建一个该类的对象,也可以将该类的对象置于某个新的类中--此谓"创建一个成员对象"
新的类可以由任意数量、任意类型的其他对象以任意可以实现新的类中想要的功能的方式所组成--此谓"组合"--"has a"
如果组合是动态发生的,那么就可以称为"聚合"
继承--"is a"

后期绑定--在向对象发送消息时,被调用的代码直到运行时才能确定
动态绑定--在运行时确定方法调用的主体

把子类看作父类--向上转型(upcasting)
void doSth(Shape s);  doSth(circle);
把子类传入到需要父类作为参数的方法中,即我知道你是父类的一个类型,而且子类中会包含有一个父类的自对象
所以可以正确执行,还有就是在继承图上是向上移动的,所以称为向上转型

关于使用组合还是继承的一个判断方法是：问一问自己是否需要从新类向基类进行向上转型

向下转换为一个更具体的类型--向下转型

把问题切分成多个独立可运行的部分(任务),从而提高程序的响应能力。
在程序中这些独立的部分被成为线程,上述概念称为"并发"

类的成员变量会赋初值,但是方法中的局部变量不会

static不能用于方法中的局部变量

一条通用原则：用继承表达行为间的差异,用字段表达状态上的变化

一个接口表示:只要是实现了这个接口的类看起来都是这个样子,接口被用来建立类与类之间的协议





